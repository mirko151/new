// DoctorManagementFrame.java
package gui;

import model.Appointment;
import model.Doctor;
import service.AppointmentService;
import service.UserService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class DoctorManagementFrame extends JFrame {
    private Doctor doctor;
    private UserService userService;
    private AppointmentService appointmentService;
    private JTable appointmentTable;
    private DefaultTableModel tableModel;

    public DoctorManagementFrame(Doctor doctor, UserService userService, AppointmentService appointmentService) {
        this.doctor = doctor;
        this.userService = userService;
        this.appointmentService = appointmentService;
        initialize();
    }

    private void initialize() {
        setTitle("Upravljanje terminima - Doktor");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new BorderLayout());
        JLabel label = new JLabel("Dobrodošli, Dr. " + doctor.getLastName());
        panel.add(label, BorderLayout.NORTH);

        // Tabela
        String[] columnNames = {"ID", "Pacijent", "Datum", "Status", "Opis terapije"};
        tableModel = new DefaultTableModel(columnNames, 0);
        appointmentTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(appointmentTable);

        // Učitavanje termina u tabelu
        loadAppointments();

        // Dugmad
        JPanel buttonPanel = new JPanel();
        JButton addButton = new JButton("Dodaj termin");
        JButton editButton = new JButton("Izmeni termin");
        JButton deleteButton = new JButton("Obriši termin");

        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);

        // Akcije dugmadi
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new AppointmentFormFrame(appointmentService, null, List.of(doctor), userService.getUsers().stream().filter(u -> u instanceof Patient).map(u -> (Patient) u).toList(), DoctorManagementFrame.this).setVisible(true);
            }
        });

        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = appointmentTable.getSelectedRow();
                if (selectedRow >= 0) {
                    String appointmentId = (String) tableModel.getValueAt(selectedRow, 0);
                    Appointment appointment = appointmentService.getAllAppointments().stream().filter(a -> a.getId().equals(appointmentId)).findFirst().orElse(null);
                    if (appointment != null) {
                        new AppointmentFormFrame(appointmentService, appointment, List.of(doctor), userService.getUsers().stream().filter(u -> u instanceof Patient).map(u -> (Patient) u).toList(), DoctorManagementFrame.this).setVisible(true);
                    }
                } else {
                    JOptionPane.showMessageDialog(DoctorManagementFrame.this, "Molimo izaberite termin za izmenu.", "Greška", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = appointmentTable.getSelectedRow();
                if (selectedRow >= 0) {
                    String appointmentId = (String) tableModel.getValueAt(selectedRow, 0);
                    int confirmation = JOptionPane.showConfirmDialog(DoctorManagementFrame.this, "Da li ste sigurni da želite da obrišete ovaj termin?", "Potvrda brisanja", JOptionPane.YES_NO_OPTION);
                    if (confirmation == JOptionPane.YES_OPTION) {
                        appointmentService.getAllAppointments().removeIf(a -> a.getId().equals(appointmentId));
                        appointmentService.saveAppointments();
                        loadAppointments();
                    }
                } else {
                    JOptionPane.showMessageDialog(DoctorManagementFrame.this, "Molimo izaberite termin za brisanje.", "Greška", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        add(panel);
    }

    public void loadAppointments() {
        tableModel.setRowCount(0);  // Očistiti tabelu
        List<Appointment> appointments = appointmentService.getAppointmentsForDoctor(doctor);
        for (Appointment appointment : appointments) {
            Object[] row = new Object[]{
                    appointment.getId(),
                    appointment.getPatient() != null ? appointment.getPatient().getLastName() : "",
                    appointment.getDate(),
                    appointment.getStatus(),
                    appointment.getTherapyDescription()
            };
            tableModel.addRow(row);
        }
    }
}
